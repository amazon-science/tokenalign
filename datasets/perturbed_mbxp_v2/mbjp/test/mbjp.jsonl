{"task_id": "MBJP/66", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass PosCount {\n    /**\n     * * Write a Java function to count positive numbers in a list.\n     *\n     * > posCount([1, -2, 3, -4])\n     * 2\n     * > posCount([3, 4, 5, -1])\n     * 3\n     * > posCount([1, 2, 3, 4])\n     * 4\n     */\n    public static int posCount(List<Integer> list) {\n        int count = 0;\n        if (list.size() == 0) {\n            return count;\n", "entry_point": "posCount", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<Integer> arg00 = Arrays.asList(1, -2, 3, -4);\n        int x0 = PosCount.posCount(Arrays.asList(1, -2, 3, -4));\n        int v0 = 2;\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<Integer> arg10 = Arrays.asList(3, 4, 5, -1);\n        int x1 = PosCount.posCount(Arrays.asList(3, 4, 5, -1));\n        int v1 = 3;\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<Integer> arg20 = Arrays.asList(1, 2, 3, 4);\n        int x2 = PosCount.posCount(Arrays.asList(1, 2, 3, 4));\n        int v2 = 4;\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a Java function to count positive numbers in a list.", "language": "java", "canonical_solution": "        }\n        for (int i = 0; i < list.size(); i++) {\n            if (list.get(i) > 0) {\n                count++;\n            }\n        }\n        return count;\n    }\n}"}
{"task_id": "MBJP/156", "prompt": "import java.io.*;\nimport java.lang.*;\nimport java.util.*;\nimport java.math.*;\n\n\nclass TupleIntStr {\n    /**\n     * * Write a function to convert a tuple of string values to a tuple of integer values.\n     *\n     * > tupleIntStr([[\"333\", \"33\"], [\"1416\", \"55\"]])\n     * [[333, 33], [1416, 55]]\n     * > tupleIntStr([[\"999\", \"99\"], [\"1000\", \"500\"]])\n     * [[999, 99], [1000, 500]]\n     * > tupleIntStr([[\"666\", \"66\"], [\"1500\", \"555\"]])\n     * [[666, 66], [1500, 555]]\n     */\n    public static List<List<Integer>> tupleIntStr(List<List<String>> tupleStr) {\n        List<List<Integer>> res = new ArrayList<>();\n        for (int i = 0; i < tupleStr.size(); i++) {\n            res.add(new ArrayList<>());\n", "entry_point": "tupleIntStr", "test": "\n\nclass Main {\n    public static boolean compare(Object obj1, Object obj2) {\n        if (obj1 == null && obj2 == null){\n            return true;\n        } else if (obj1 == null || obj2 == null){\n            return false;\n        } else {\n            return obj1.equals(obj2);\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        List<List<String>> arg00 = Arrays.asList(Arrays.asList(\"333\", \"33\"), Arrays.asList(\"1416\", \"55\"));\n        List<List<Integer>> x0 = TupleIntStr.tupleIntStr(Arrays.asList(Arrays.asList(\"333\", \"33\"), Arrays.asList(\"1416\", \"55\")));\n        List<List<Integer>> v0 = Arrays.asList(Arrays.asList(333, 33), Arrays.asList(1416, 55));\n        if (!(compare(x0, v0))) {\n            throw new java.lang.Exception(\"Exception -- test case 0 did not pass. x0 = \" + x0);\n        }\n\n        List<List<String>> arg10 = Arrays.asList(Arrays.asList(\"999\", \"99\"), Arrays.asList(\"1000\", \"500\"));\n        List<List<Integer>> x1 = TupleIntStr.tupleIntStr(Arrays.asList(Arrays.asList(\"999\", \"99\"), Arrays.asList(\"1000\", \"500\")));\n        List<List<Integer>> v1 = Arrays.asList(Arrays.asList(999, 99), Arrays.asList(1000, 500));\n        if (!(compare(x1, v1))) {\n            throw new java.lang.Exception(\"Exception -- test case 1 did not pass. x1 = \" + x1);\n        }\n\n        List<List<String>> arg20 = Arrays.asList(Arrays.asList(\"666\", \"66\"), Arrays.asList(\"1500\", \"555\"));\n        List<List<Integer>> x2 = TupleIntStr.tupleIntStr(Arrays.asList(Arrays.asList(\"666\", \"66\"), Arrays.asList(\"1500\", \"555\")));\n        List<List<Integer>> v2 = Arrays.asList(Arrays.asList(666, 66), Arrays.asList(1500, 555));\n        if (!(compare(x2, v2))) {\n            throw new java.lang.Exception(\"Exception -- test case 2 did not pass. x2 = \" + x2);\n        }\n\n\n}\n}\n", "description": "Write a function to convert a tuple of string values to a tuple of integer values.", "language": "java", "canonical_solution": "            for (String str : tupleStr.get(i)) {\n                res.get(i).add(Integer.valueOf(str));\n            }\n        }\n        return res;\n    }\n}"}